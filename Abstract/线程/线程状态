######################################

目录:线程中断、线程让步、线程睡眠、线程合并

######################################
======================================
第一段:线程中断  ind.thread_status.Interrupt
======================================

void interrupt() 中断线程。
    其实interrupt()方法并不是中断线程的执行，而是为调用该方法的线程对象打上一个标记，设置其中断状态为true，通过isInterrupted()方法可以得到这个线程状态

static boolean	interrupted() 测试当前线程是否已经中断。
    Thread.interrupted()方法是一个静态方法，它是判断当前线程的中断状态，需要注意的是，线程的中断状态会由该方法清除。

boolean	isInterrupted() 测试线程是否已经中断。



======================================
第二段:线程让步 ind.thread_status.YieldTest
======================================

static void	yield()  暂停当前正在执行的线程对象，并执行其他线程
    注意，如果存在synchronized线程同步的话，线程让步不会释放锁(监视器对象)。


======================================
第三段:线程睡眠
======================================
static void	sleep(long millis, int nanos) 在指定的毫秒数加指定的纳秒数内让当前正在执行的线程休眠（暂停执行）。

    线程睡眠的过程中，如果是在synchronized线程同步内，是持有锁(监视器对象)的，也就是说，线程是关门睡觉的，别的线程进不来

======================================
第四段:线程合并
======================================


======================================
第五段:相关知识
======================================

1.wait进入阻塞，就会释放当前锁,wait()会释放锁，yield(),sleep()不会放弃锁

2.线程从创建、运行到结束总是处于下面五个状态之一：新建状态、就绪状态、运行状态、阻塞状态及死亡状态